const DeviceService = require('../services/DeviceService');
const SensorData = require('../models/SensorData');

const setupSocketIO = (io) => {
  // L∆∞u tr·ªØ socket c·ªßa ESP8266 duy nh·∫•t
  let esp8266Socket = null;

  io.on('connection', (socket) => {
    console.log(`New connection: ${socket.id}`);

    // X·ª≠ l√Ω ESP8266 k·∫øt n·ªëi
    socket.on('device-connect', async () => {
      console.log(`ESP8266 device connected with socket: ${socket.id}`);
      esp8266Socket = socket;

      try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã trong DB
        const device = await DeviceService.updateStatus('online');

        // Th√¥ng b√°o cho t·∫•t c·∫£ clients
        io.emit('device-status', {
          status: 'online',
          device: device
        });
      } catch (error) {
        console.error('Error updating device status:', error);
      }
    });

    // Nh·∫≠n d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ ESP8266
    socket.on('sensor-data', async (data) => {
      console.log(`Received sensor data:`, data);

      try {
        // L∆∞u v√†o database
        const sensorData = new SensorData({
          temperature: data.temperature,
          humidity: data.humidity,
          gasLevel: data.gasLevel
        });
        await sensorData.save();

        // C·∫≠p nh·∫≠t lastSeen c·ªßa thi·∫øt b·ªã
        await DeviceService.updateStatus('online');

        // Ki·ªÉm tra c·∫£nh b√°o v√† √°p d·ª•ng logic t·ª± ƒë·ªông
        const alerts = [];
        let autoActivation = null;

        // ƒê·ªãnh nghƒ©a ng∆∞·ª°ng
        const TEMP_THRESHOLD = 60;
        const GAS_THRESHOLD = 300;

        // Ph√¢n t√≠ch t√¨nh hu·ªëng v√† x√°c ƒë·ªãnh h√†nh ƒë·ªông
        if (data.temperature >= TEMP_THRESHOLD && data.gasLevel >= GAS_THRESHOLD) {
          // TR∆Ø·ªúNG H·ª¢P 1: C·∫£ nhi·ªát ƒë·ªô v√† gas ƒë·ªÅu cao (Ch√°y nghi√™m tr·ªçng)
          alerts.push({ type: 'temperature', value: data.temperature });
          alerts.push({ type: 'gas', value: data.gasLevel });

          autoActivation = {
            scenario: 'severe-fire',
            description: 'Ch√°y nghi√™m tr·ªçng - C·∫£ nhi·ªát ƒë·ªô v√† kh√≠ gas ƒë·ªÅu cao',
            actions: {
              door: true,                    // M·ªü c·ª≠a tho√°t hi·ªÉm
              fan: true,                     // B·∫≠t qu·∫°t th√¥ng gi√≥
              fireSuppression: 'all'         // Phun n∆∞·ªõc c·∫£ 2 ph√≤ng
            }
          };

          console.log('üî•üî• SEVERE FIRE DETECTED! Temp:', data.temperature, '¬∞C, Gas:', data.gasLevel, 'ppm');

        } else if (data.temperature >= TEMP_THRESHOLD && data.gasLevel < GAS_THRESHOLD) {
          // TR∆Ø·ªúNG H·ª¢P 2: Ch·ªâ nhi·ªát ƒë·ªô cao (Ch√°y ·ªü ph√≤ng ng·ªß - √≠t kh√≥i)
          alerts.push({ type: 'temperature', value: data.temperature });

          autoActivation = {
            scenario: 'bedroom-fire',
            description: 'Ch√°y ph√≤ng ng·ªß - Nhi·ªát ƒë·ªô cao, √≠t kh√≥i',
            actions: {
              door: true,                    // M·ªü c·ª≠a tho√°t hi·ªÉm
              fan: true,                     // B·∫≠t qu·∫°t th√¥ng gi√≥
              fireSuppression: 'bedroom'     // Phun n∆∞·ªõc ph√≤ng ng·ªß
            }
          };

          console.log('üî• BEDROOM FIRE DETECTED! Temp:', data.temperature, '¬∞C (Low gas level)');

        } else if (data.temperature < TEMP_THRESHOLD && data.gasLevel >= GAS_THRESHOLD) {
          // TR∆Ø·ªúNG H·ª¢P 3: Ch·ªâ gas cao (R√≤ gas/ch√°y √¢m ·ªâ ·ªü b·∫øp)
          alerts.push({ type: 'gas', value: data.gasLevel });

          autoActivation = {
            scenario: 'kitchen-gas-leak',
            description: 'R√≤ gas ho·∫∑c ch√°y √¢m ·ªâ ·ªü b·∫øp - Kh√≠ gas cao, nhi·ªát ƒë·ªô th·∫•p',
            actions: {
              door: true,                    // M·ªü c·ª≠a th√¥ng gi√≥
              fan: true,                     // B·∫≠t qu·∫°t h√∫t kh√≠ ƒë·ªôc
              fireSuppression: 'kitchen'     // Phun n∆∞·ªõc ph√≤ng b·∫øp
            }
          };

          console.log('üí® KITCHEN GAS LEAK DETECTED! Gas:', data.gasLevel, 'ppm (Normal temperature)');
        }

        // Th·ª±c thi h√†nh ƒë·ªông t·ª± ƒë·ªông n·∫øu c√≥
        if (autoActivation && esp8266Socket) {
          console.log(`üö® AUTO-ACTIVATION: ${autoActivation.scenario.toUpperCase()}`);
          console.log(`üìã Description: ${autoActivation.description}`);
          console.log('üéØ Actions to execute:', autoActivation.actions);

          try {
            // Th·ª±c hi·ªán c√°c h√†nh ƒë·ªông theo th·ª© t·ª± ∆∞u ti√™n
            const actions = autoActivation.actions;

            // 1. M·ªû C·ª¨A (∆Øu ti√™n cao nh·∫•t - tho√°t hi·ªÉm)
            if (actions.door) {
              await DeviceService.updateControl('door', true);
              esp8266Socket.emit('control', {
                control: 'door',
                value: true
              });
              console.log('üö™ Door OPENED for emergency exit');
            }

            // 2. B·∫¨T QU·∫†T (Th√¥ng gi√≥, h√∫t kh√≥i)
            if (actions.fan) {
              await DeviceService.updateControl('fan', true);
              esp8266Socket.emit('control', {
                control: 'fan',
                value: true
              });
              console.log('üå™Ô∏è Fan ACTIVATED for ventilation');
            }

            // 3. K√çCH HO·∫†T H·ªÜ TH·ªêNG PHUN N∆Ø·ªöC
            if (actions.fireSuppression) {
              await DeviceService.updateControl('fireSuppression', true, actions.fireSuppression);
              esp8266Socket.emit('control', {
                control: 'fireSuppression',
                subControl: actions.fireSuppression,
                value: true
              });

              const locationText = actions.fireSuppression === 'all' ? 'C·∫¢ HAI PH√íNG' :
                actions.fireSuppression === 'bedroom' ? 'PH√íNG NG·ª¶' : 'PH√íNG B·∫æP';
              console.log(`üöø Fire suppression system ACTIVATED: ${locationText}`);
            }

            // Th√¥ng b√°o cho frontend v·ªÅ t·∫•t c·∫£ thay ƒë·ªïi
            io.emit('control-update', {
              control: 'door',
              value: true
            });

            io.emit('control-update', {
              control: 'fan',
              value: true
            });

            io.emit('control-update', {
              control: 'fireSuppression',
              subControl: actions.fireSuppression,
              value: true
            });

            // Th√™m th√¥ng b√°o t·ª± ƒë·ªông v√†o alerts
            alerts.push({
              type: 'auto-suppression',
              scenario: autoActivation.scenario,
              message: `üö® K√çCH HO·∫†T T·ª∞ ƒê·ªòNG: ${autoActivation.description}`,
              actions: {
                door: 'üö™ M·ªü c·ª≠a tho√°t hi·ªÉm',
                fan: 'üå™Ô∏è B·∫≠t qu·∫°t th√¥ng gi√≥',
                fireSuppression: `üöø Phun n∆∞·ªõc ${actions.fireSuppression === 'all' ? 'c·∫£ hai ph√≤ng' :
                  actions.fireSuppression === 'bedroom' ? 'ph√≤ng ng·ªß' : 'ph√≤ng b·∫øp'}`
              }
            });

          } catch (error) {
            console.error('‚ùå Error executing auto-activation:', error);
            alerts.push({
              type: 'system-error',
              message: 'L·ªói khi k√≠ch ho·∫°t h·ªá th·ªëng t·ª± ƒë·ªông!'
            });
          }
        }

        // G·ª≠i d·ªØ li·ªáu v√† c·∫£nh b√°o cho frontend
        io.emit('data-update', {
          ...data,
          alerts,
          autoActivation,
          timestamp: new Date()
        });

        console.log("üì° Data sent to frontend", {
          ...data,
          alerts: alerts.length,
          autoActivation: autoActivation?.scenario || 'none',
          timestamp: new Date()
        });

      } catch (error) {
        console.error('Error saving sensor data:', error);
      }
    });

    // Nh·∫≠n l·ªánh ƒëi·ªÅu khi·ªÉn t·ª´ frontend
    socket.on('control-device', async (command) => {
      const { control, value, subControl } = command;
      console.log(`üéÆ Manual control: ${control}${subControl ? `.${subControl}` : ''} = ${value}`);

      try {
        // G·ª≠i l·ªánh tr·ª±c ti·∫øp ƒë·∫øn ESP8266
        if (esp8266Socket) {
          esp8266Socket.emit('control', { control, value, subControl });

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëi·ªÅu khi·ªÉn trong DB
          await DeviceService.updateControl(control, value, subControl);

          // Th√¥ng b√°o c·∫≠p nh·∫≠t ƒëi·ªÅu khi·ªÉn cho t·∫•t c·∫£ clients
          io.emit('control-update', { control, value, subControl });

          console.log(`‚úÖ Manual control executed: ${control}${subControl ? `.${subControl}` : ''} = ${value}`);
        } else {
          console.log("‚ùå ESP8266 not connected - Cannot execute control");
        }
      } catch (error) {
        console.error('‚ùå Error handling control command:', error);
      }
    });

    // X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', async () => {
      // Ki·ªÉm tra n·∫øu ESP8266 ng·∫Øt k·∫øt n·ªëi
      if (socket === esp8266Socket) {
        console.log(`üì± ESP8266 device disconnected`);
        esp8266Socket = null;

        try {
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong DB
          await DeviceService.updateStatus('offline');

          // Th√¥ng b√°o cho t·∫•t c·∫£ clients
          io.emit('device-status', { status: 'offline' });
        } catch (error) {
          console.error('Error updating device status on disconnect:', error);
        }
      }
    });

    // X·ª≠ l√Ω y√™u c·∫ßu tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ client
    socket.on('request-device-status', () => {
      console.log(`Client ${socket.id} requested device status`);

      // G·ª≠i tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa thi·∫øt b·ªã
      const deviceStatus = esp8266Socket ? 'online' : 'offline';
      socket.emit('device-status', {
        status: deviceStatus,
        timestamp: new Date()
      });

      console.log(`Sent device status to client: ${deviceStatus}`);
    });

    // X·ª≠ l√Ω k·∫øt n·ªëi c·ªßa web client
    socket.on('web-client-connect', () => {
      console.log(`Web client connected: ${socket.id}`);

      // G·ª≠i tr·∫°ng th√°i thi·∫øt b·ªã ngay khi web client k·∫øt n·ªëi
      const deviceStatus = esp8266Socket ? 'online' : 'offline';
      socket.emit('device-status', {
        status: deviceStatus,
        timestamp: new Date()
      });

      console.log(`Sent device status to web client: ${deviceStatus}`);
    });
  });
};

module.exports = setupSocketIO;